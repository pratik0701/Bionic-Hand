
Recieve5_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800078  00800078  00000a84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f35  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000841  00000000  00000000  000030ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000038ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 92 02 	call	0x524	; 0x524 <main>
  8a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WDT_off>:


char uart_recieve(void){
	while((UCSRA & (1<<RXC))==0);
	return UDR;
}
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	81 bd       	out	0x21, r24	; 33
  96:	11 bc       	out	0x21, r1	; 33
  98:	08 95       	ret

0000009a <adcInit>:
  9a:	17 b8       	out	0x07, r1	; 7
  9c:	8f e8       	ldi	r24, 0x8F	; 143
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <adcStart>:
  a2:	80 6c       	ori	r24, 0xC0	; 192
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	36 9a       	sbi	0x06, 6	; 6
  a8:	08 95       	ret

000000aa <timerInit>:
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	83 bf       	out	0x33, r24	; 51
  ae:	84 e1       	ldi	r24, 0x14	; 20
  b0:	8c bf       	out	0x3c, r24	; 60
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	89 bf       	out	0x39, r24	; 57
  b6:	08 95       	ret

000000b8 <uart_init>:
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	89 b9       	out	0x09, r24	; 9
  bc:	88 e9       	ldi	r24, 0x98	; 152
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	08 95       	ret

000000c6 <uart_transmit>:
  c6:	8c b9       	out	0x0c, r24	; 12
  c8:	5e 9b       	sbis	0x0b, 6	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart_transmit+0x2>
  cc:	5e 9a       	sbi	0x0b, 6	; 11
  ce:	08 95       	ret

000000d0 <uart_string>:
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	88 81       	ld	r24, Y
  d8:	88 23       	and	r24, r24
  da:	31 f0       	breq	.+12     	; 0xe8 <uart_string+0x18>
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
  e2:	89 91       	ld	r24, Y+
  e4:	81 11       	cpse	r24, r1
  e6:	fb cf       	rjmp	.-10     	; 0xde <uart_string+0xe>
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <recieve>:
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	81 36       	cpi	r24, 0x61	; 97
  f4:	01 f5       	brne	.+64     	; 0x136 <recieve+0x48>
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
  fe:	e5 e9       	ldi	r30, 0x95	; 149
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	01 90       	ld	r0, Z+
 104:	00 20       	and	r0, r0
 106:	e9 f7       	brne	.-6      	; 0x102 <recieve+0x14>
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	af 01       	movw	r20, r30
 10c:	45 59       	subi	r20, 0x95	; 149
 10e:	50 40       	sbci	r21, 0x00	; 0
 110:	66 e9       	ldi	r22, 0x96	; 150
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	85 e9       	ldi	r24, 0x95	; 149
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c0 04 	call	0x980	; 0x980 <memmove>
 11c:	85 e9       	ldi	r24, 0x95	; 149
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 124:	85 e9       	ldi	r24, 0x95	; 149
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 a2 04 	call	0x944	; 0x944 <atoi>
 12c:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <indexrecieve+0x1>
 130:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <indexrecieve>
 134:	08 95       	ret
 136:	82 36       	cpi	r24, 0x62	; 98
 138:	01 f5       	brne	.+64     	; 0x17a <recieve+0x8c>
 13a:	86 e6       	ldi	r24, 0x66	; 102
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 142:	e5 e9       	ldi	r30, 0x95	; 149
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	01 90       	ld	r0, Z+
 148:	00 20       	and	r0, r0
 14a:	e9 f7       	brne	.-6      	; 0x146 <recieve+0x58>
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	af 01       	movw	r20, r30
 150:	45 59       	subi	r20, 0x95	; 149
 152:	50 40       	sbci	r21, 0x00	; 0
 154:	66 e9       	ldi	r22, 0x96	; 150
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	85 e9       	ldi	r24, 0x95	; 149
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 c0 04 	call	0x980	; 0x980 <memmove>
 160:	85 e9       	ldi	r24, 0x95	; 149
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 168:	85 e9       	ldi	r24, 0x95	; 149
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 a2 04 	call	0x944	; 0x944 <atoi>
 170:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <middlerecieve+0x1>
 174:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <middlerecieve>
 178:	08 95       	ret
 17a:	83 36       	cpi	r24, 0x63	; 99
 17c:	01 f5       	brne	.+64     	; 0x1be <recieve+0xd0>
 17e:	88 e6       	ldi	r24, 0x68	; 104
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 186:	e5 e9       	ldi	r30, 0x95	; 149
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	01 90       	ld	r0, Z+
 18c:	00 20       	and	r0, r0
 18e:	e9 f7       	brne	.-6      	; 0x18a <recieve+0x9c>
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	af 01       	movw	r20, r30
 194:	45 59       	subi	r20, 0x95	; 149
 196:	50 40       	sbci	r21, 0x00	; 0
 198:	66 e9       	ldi	r22, 0x96	; 150
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	85 e9       	ldi	r24, 0x95	; 149
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 c0 04 	call	0x980	; 0x980 <memmove>
 1a4:	85 e9       	ldi	r24, 0x95	; 149
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 1ac:	85 e9       	ldi	r24, 0x95	; 149
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 a2 04 	call	0x944	; 0x944 <atoi>
 1b4:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <ringrecieve+0x1>
 1b8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <ringrecieve>
 1bc:	08 95       	ret
 1be:	84 36       	cpi	r24, 0x64	; 100
 1c0:	01 f5       	brne	.+64     	; 0x202 <recieve+0x114>
 1c2:	86 e7       	ldi	r24, 0x76	; 118
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 1ca:	e5 e9       	ldi	r30, 0x95	; 149
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	01 90       	ld	r0, Z+
 1d0:	00 20       	and	r0, r0
 1d2:	e9 f7       	brne	.-6      	; 0x1ce <recieve+0xe0>
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	af 01       	movw	r20, r30
 1d8:	45 59       	subi	r20, 0x95	; 149
 1da:	50 40       	sbci	r21, 0x00	; 0
 1dc:	66 e9       	ldi	r22, 0x96	; 150
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	85 e9       	ldi	r24, 0x95	; 149
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 c0 04 	call	0x980	; 0x980 <memmove>
 1e8:	85 e9       	ldi	r24, 0x95	; 149
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 1f0:	85 e9       	ldi	r24, 0x95	; 149
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a2 04 	call	0x944	; 0x944 <atoi>
 1f8:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <littlerecieve+0x1>
 1fc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <littlerecieve>
 200:	08 95       	ret
 202:	85 36       	cpi	r24, 0x65	; 101
 204:	f9 f4       	brne	.+62     	; 0x244 <recieve+0x156>
 206:	8a e6       	ldi	r24, 0x6A	; 106
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 20e:	e5 e9       	ldi	r30, 0x95	; 149
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	01 90       	ld	r0, Z+
 214:	00 20       	and	r0, r0
 216:	e9 f7       	brne	.-6      	; 0x212 <recieve+0x124>
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	af 01       	movw	r20, r30
 21c:	45 59       	subi	r20, 0x95	; 149
 21e:	50 40       	sbci	r21, 0x00	; 0
 220:	66 e9       	ldi	r22, 0x96	; 150
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	85 e9       	ldi	r24, 0x95	; 149
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 c0 04 	call	0x980	; 0x980 <memmove>
 22c:	85 e9       	ldi	r24, 0x95	; 149
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
 234:	85 e9       	ldi	r24, 0x95	; 149
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 a2 04 	call	0x944	; 0x944 <atoi>
 23c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <thumbrecieve+0x1>
 240:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <thumbrecieve>
 244:	08 95       	ret

00000246 <__vector_11>:

ISR(USART_RXC_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	//WDT_ON();	
	dataBuffer[i]=UDR;
 268:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <i>
 26c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <i+0x1>
 270:	2c b1       	in	r18, 0x0c	; 12
 272:	fc 01       	movw	r30, r24
 274:	e5 57       	subi	r30, 0x75	; 117
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	20 83       	st	Z, r18
	
	if (dataBuffer[i]=='*')
 27a:	2a 32       	cpi	r18, 0x2A	; 42
 27c:	59 f4       	brne	.+22     	; 0x294 <__vector_11+0x4e>
	{
		//WDT_off();
		//WDT_ON();
		i=0;
 27e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <i+0x1>
 282:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i>
		y=1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 28e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 292:	30 c0       	rjmp	.+96     	; 0x2f4 <__vector_11+0xae>
	}
	else if(y){
 294:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__data_end>
 298:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__data_end+0x1>
 29c:	45 2b       	or	r20, r21
 29e:	51 f1       	breq	.+84     	; 0x2f4 <__vector_11+0xae>
		if (dataBuffer[i]=='|')
 2a0:	2c 37       	cpi	r18, 0x7C	; 124
 2a2:	b9 f4       	brne	.+46     	; 0x2d2 <__vector_11+0x8c>
		{
			dataBuffer[i]='\0';
 2a4:	fc 01       	movw	r30, r24
 2a6:	e5 57       	subi	r30, 0x75	; 117
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	10 82       	st	Z, r1
			//WDT_off();
			//WDT_ON();
			strcpy(data,dataBuffer);
 2ac:	6b e8       	ldi	r22, 0x8B	; 139
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	85 e9       	ldi	r24, 0x95	; 149
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <strcpy>
			//uart_string("InsideUART_ISR");
			recieve(data);
 2b8:	85 e9       	ldi	r24, 0x95	; 149
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 77 00 	call	0xee	; 0xee <recieve>
			i=0;
 2c0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <i+0x1>
 2c4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i>
			y=0;
 2c8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 2cc:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <__vector_11+0xae>
		}
		else{
			i++;
 2d2:	01 96       	adiw	r24, 0x01	; 1
			if (i>8)
 2d4:	89 30       	cpi	r24, 0x09	; 9
 2d6:	91 05       	cpc	r25, r1
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <__vector_11+0x9e>
			recieve(data);
			i=0;
			y=0;
		}
		else{
			i++;
 2da:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <i+0x1>
 2de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <i>
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <__vector_11+0xae>
			if (i>8)
			{
				i=0;
 2e4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <i+0x1>
 2e8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <i>
				y=0;
 2ec:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 2f0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
				//WDT_off();
				//WDT_ON();
			}
		}
	}
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_14>:

ISR(ADC_vect){
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	int adcValue;
	char waste[10];
	adcValue=ADC;
 338:	24 b1       	in	r18, 0x04	; 4
 33a:	35 b1       	in	r19, 0x05	; 5
	switch(loop){
 33c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <loop>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	59 f0       	breq	.+22     	; 0x35a <__vector_14+0x44>
 344:	28 f0       	brcs	.+10     	; 0x350 <__vector_14+0x3a>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	69 f0       	breq	.+26     	; 0x364 <__vector_14+0x4e>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	81 f0       	breq	.+32     	; 0x36e <__vector_14+0x58>
 34e:	14 c0       	rjmp	.+40     	; 0x378 <__vector_14+0x62>
		case 0:
		indexFeedBack=adcValue;			//indexfeedback is the location of index finger in Bionic Hand
 350:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <indexFeedBack+0x1>
 354:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <indexFeedBack>
		//WDT_off();
		//WDT_ON();
		//itoa(indexFeedBack,waste,10);	uart_string("I");	uart_string(waste);     uart_string("\n");
		break;
 358:	1b c0       	rjmp	.+54     	; 0x390 <__vector_14+0x7a>
		
		case 1:
		middleFeedBack=adcValue;
 35a:	30 93 82 00 	sts	0x0082, r19	; 0x800082 <middleFeedBack+0x1>
 35e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <middleFeedBack>
		//WDT_off();
		//WDT_ON();
		//itoa(middleFeedBack,waste,10);	uart_string("m");	uart_string(waste);     uart_string("\n");
		break;
 362:	16 c0       	rjmp	.+44     	; 0x390 <__vector_14+0x7a>
		
		case 2:
		ringFeedBack=adcValue;
 364:	30 93 80 00 	sts	0x0080, r19	; 0x800080 <ringFeedBack+0x1>
 368:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <ringFeedBack>
		//WDT_off();
		//WDT_ON();
		//itoa(ringFeedBack,waste,10);	uart_string("R");	uart_string(waste);     uart_string("\n");
		break;
 36c:	11 c0       	rjmp	.+34     	; 0x390 <__vector_14+0x7a>
		
		case 3:
		littleFeedBack=adcValue;
 36e:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <littleFeedBack+0x1>
 372:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <littleFeedBack>
 376:	05 c0       	rjmp	.+10     	; 0x382 <__vector_14+0x6c>
		//WDT_off();
		//WDT_ON();
		//itoa(littleFeedBack,waste,10);	uart_string("L");	uart_string(waste);     uart_string("\n");
		break;
	}
	loop++;
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <loop>
	if(loop>3)	loop=0;
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	10 f0       	brcs	.+4      	; 0x386 <__vector_14+0x70>
 382:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <loop>
	adcStart(loop);
 386:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <loop>
 38a:	0e 94 51 00 	call	0xa2	; 0xa2 <adcStart>
}
 38e:	04 c0       	rjmp	.+8      	; 0x398 <__vector_14+0x82>
		//WDT_off();
		//WDT_ON();
		//itoa(littleFeedBack,waste,10);	uart_string("L");	uart_string(waste);     uart_string("\n");
		break;
	}
	loop++;
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <loop>
 396:	f7 cf       	rjmp	.-18     	; 0x386 <__vector_14+0x70>
	if(loop>3)	loop=0;
	adcStart(loop);
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <indexMotor>:
}



void indexMotor(int indexrecieve, int indexFeedBack){
	if(indexrecieve>=indexFeedBack-error && indexrecieve<=indexFeedBack+error){
 3ba:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 3be:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 3c2:	ab 01       	movw	r20, r22
 3c4:	42 1b       	sub	r20, r18
 3c6:	53 0b       	sbc	r21, r19
 3c8:	84 17       	cp	r24, r20
 3ca:	95 07       	cpc	r25, r21
 3cc:	d4 f0       	brlt	.+52     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ce:	62 0f       	add	r22, r18
 3d0:	73 1f       	adc	r23, r19
 3d2:	68 17       	cp	r22, r24
 3d4:	79 07       	cpc	r23, r25
 3d6:	3c f0       	brlt	.+14     	; 0x3e6 <indexMotor+0x2c>
		//stop indexmotor
		WDT_off();
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	81 bd       	out	0x21, r24	; 33
void indexMotor(int indexrecieve, int indexFeedBack){
	if(indexrecieve>=indexFeedBack-error && indexrecieve<=indexFeedBack+error){
		//stop indexmotor
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<0);
 3e0:	c0 98       	cbi	0x18, 0	; 24
		PORTB&=~(1<<1);
 3e2:	c1 98       	cbi	0x18, 1	; 24
 3e4:	08 95       	ret
	}
	
	else if(indexrecieve>indexFeedBack+error){
		//index finger up
		WDT_off();
 3e6:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	81 bd       	out	0x21, r24	; 33
	
	else if(indexrecieve>indexFeedBack+error){
		//index finger up
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<0);
 3ee:	c0 98       	cbi	0x18, 0	; 24
		PORTB|=(1<<1);
 3f0:	c1 9a       	sbi	0x18, 1	; 24
 3f2:	08 95       	ret
	}
	else if(indexrecieve<indexFeedBack-error){
		//index finger down
		WDT_off();
 3f4:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	81 bd       	out	0x21, r24	; 33
	}
	else if(indexrecieve<indexFeedBack-error){
		//index finger down
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<1);
 3fc:	c1 98       	cbi	0x18, 1	; 24
		PORTB|=(1<<0);
 3fe:	c0 9a       	sbi	0x18, 0	; 24
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<0);
		PORTB&=~(1<<1);
	}
}
 400:	08 95       	ret
		WDT_ON();
		PORTB&=~(1<<0);
		PORTB&=~(1<<1);
	}
	
	else if(indexrecieve>indexFeedBack+error){
 402:	62 0f       	add	r22, r18
 404:	73 1f       	adc	r23, r19
 406:	68 17       	cp	r22, r24
 408:	79 07       	cpc	r23, r25
 40a:	a4 f7       	brge	.-24     	; 0x3f4 <indexMotor+0x3a>
 40c:	ec cf       	rjmp	.-40     	; 0x3e6 <indexMotor+0x2c>

0000040e <middleMotor>:
	}
}

void middleMotor(int middlerecieve, int middleFeedBack){
	
	if(middlerecieve>=middleFeedBack-error && middlerecieve<=middleFeedBack+error){
 40e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 412:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 416:	ab 01       	movw	r20, r22
 418:	42 1b       	sub	r20, r18
 41a:	53 0b       	sbc	r21, r19
 41c:	84 17       	cp	r24, r20
 41e:	95 07       	cpc	r25, r21
 420:	d4 f0       	brlt	.+52     	; 0x456 <middleMotor+0x48>
 422:	62 0f       	add	r22, r18
 424:	73 1f       	adc	r23, r19
 426:	68 17       	cp	r22, r24
 428:	79 07       	cpc	r23, r25
 42a:	3c f0       	brlt	.+14     	; 0x43a <middleMotor+0x2c>
		WDT_off();
 42c:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 430:	8c e0       	ldi	r24, 0x0C	; 12
 432:	81 bd       	out	0x21, r24	; 33
void middleMotor(int middlerecieve, int middleFeedBack){
	
	if(middlerecieve>=middleFeedBack-error && middlerecieve<=middleFeedBack+error){
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<3);
 434:	c3 98       	cbi	0x18, 3	; 24
		PORTB&=~(1<<2);
 436:	c2 98       	cbi	0x18, 2	; 24
 438:	08 95       	ret
	}
	
	else if(middlerecieve>middleFeedBack+error){
		//index finger up
		WDT_off();
 43a:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 43e:	8c e0       	ldi	r24, 0x0C	; 12
 440:	81 bd       	out	0x21, r24	; 33
	
	else if(middlerecieve>middleFeedBack+error){
		//index finger up
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<2);
 442:	c2 98       	cbi	0x18, 2	; 24
		PORTB|=(1<<3);
 444:	c3 9a       	sbi	0x18, 3	; 24
 446:	08 95       	ret
	}
	else if(middlerecieve<middleFeedBack-error){
		//index finger down
		WDT_off();
 448:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	81 bd       	out	0x21, r24	; 33
	}
	else if(middlerecieve<middleFeedBack-error){
		//index finger down
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<3);
 450:	c3 98       	cbi	0x18, 3	; 24
		PORTB|=(1<<2);
 452:	c2 9a       	sbi	0x18, 2	; 24
		WDT_off();
		WDT_ON();
		PORTB&=~(1<<3);
		PORTB&=~(1<<2);
	}
}
 454:	08 95       	ret
		WDT_ON();
		PORTB&=~(1<<3);
		PORTB&=~(1<<2);
	}
	
	else if(middlerecieve>middleFeedBack+error){
 456:	62 0f       	add	r22, r18
 458:	73 1f       	adc	r23, r19
 45a:	68 17       	cp	r22, r24
 45c:	79 07       	cpc	r23, r25
 45e:	a4 f7       	brge	.-24     	; 0x448 <middleMotor+0x3a>
 460:	ec cf       	rjmp	.-40     	; 0x43a <middleMotor+0x2c>

00000462 <ringMotor>:
	}
}

void ringMotor(int ringrecieve, int ringFeedBack){
	
	if(ringrecieve>=ringFeedBack-60 && ringrecieve<=ringFeedBack+60){
 462:	9b 01       	movw	r18, r22
 464:	2c 53       	subi	r18, 0x3C	; 60
 466:	31 09       	sbc	r19, r1
 468:	82 17       	cp	r24, r18
 46a:	93 07       	cpc	r25, r19
 46c:	d4 f0       	brlt	.+52     	; 0x4a2 <ringMotor+0x40>
 46e:	64 5c       	subi	r22, 0xC4	; 196
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	68 17       	cp	r22, r24
 474:	79 07       	cpc	r23, r25
 476:	3c f0       	brlt	.+14     	; 0x486 <ringMotor+0x24>
		//stop indexmotor
		
		WDT_off();
 478:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 47c:	8c e0       	ldi	r24, 0x0C	; 12
 47e:	81 bd       	out	0x21, r24	; 33
	if(ringrecieve>=ringFeedBack-60 && ringrecieve<=ringFeedBack+60){
		//stop indexmotor
		
		WDT_off();
		WDT_ON();
		PORTC&=~(1<<1);
 480:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 482:	a8 98       	cbi	0x15, 0	; 21
 484:	08 95       	ret
	}
	
	else if(ringrecieve>ringFeedBack+60){
		//index finger up
		WDT_off();
 486:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	81 bd       	out	0x21, r24	; 33
	
	else if(ringrecieve>ringFeedBack+60){
		//index finger up
		WDT_off();
		WDT_ON();
		PORTC&=~(1<<0);
 48e:	a8 98       	cbi	0x15, 0	; 21
		PORTC|=(1<<1);
 490:	a9 9a       	sbi	0x15, 1	; 21
 492:	08 95       	ret
	}
	else if(ringrecieve<ringFeedBack-60){
		//index finger down
		WDT_off();
 494:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	81 bd       	out	0x21, r24	; 33
	}
	else if(ringrecieve<ringFeedBack-60){
		//index finger down
		WDT_off();
		WDT_ON();
		PORTC&=~(1<<1);
 49c:	a9 98       	cbi	0x15, 1	; 21
		PORTC|=(1<<0);
 49e:	a8 9a       	sbi	0x15, 0	; 21
		WDT_off();
		WDT_ON();
		PORTC&=~(1<<1);
		PORTC&=~(1<<0);
	}
}
 4a0:	08 95       	ret
		WDT_ON();
		PORTC&=~(1<<1);
		PORTC&=~(1<<0);
	}
	
	else if(ringrecieve>ringFeedBack+60){
 4a2:	64 5c       	subi	r22, 0xC4	; 196
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	68 17       	cp	r22, r24
 4a8:	79 07       	cpc	r23, r25
 4aa:	a4 f7       	brge	.-24     	; 0x494 <ringMotor+0x32>
 4ac:	ec cf       	rjmp	.-40     	; 0x486 <ringMotor+0x24>

000004ae <littleMotor>:
	}
}

void littleMotor(int littlerecieve, int littleFeedBack){
	
	if(littlerecieve>=littleFeedBack-25 && littlerecieve<=littleFeedBack+25){
 4ae:	9b 01       	movw	r18, r22
 4b0:	29 51       	subi	r18, 0x19	; 25
 4b2:	31 09       	sbc	r19, r1
 4b4:	82 17       	cp	r24, r18
 4b6:	93 07       	cpc	r25, r19
 4b8:	74 f0       	brlt	.+28     	; 0x4d6 <littleMotor+0x28>
 4ba:	67 5e       	subi	r22, 0xE7	; 231
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	68 17       	cp	r22, r24
 4c0:	79 07       	cpc	r23, r25
 4c2:	1c f0       	brlt	.+6      	; 0x4ca <littleMotor+0x1c>
		//stop indexmotor
		//WDT_off();
		//WDT_ON();
		PORTC&=~(1<<2);
 4c4:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<3);
 4c6:	ab 98       	cbi	0x15, 3	; 21
 4c8:	08 95       	ret
	
	else if(littlerecieve>littleFeedBack+25){
		//index finger up
		//WDT_off();
		//WDT_ON();
		PORTC&=~(1<<2);
 4ca:	aa 98       	cbi	0x15, 2	; 21
		PORTC|=(1<<3);
 4cc:	ab 9a       	sbi	0x15, 3	; 21
 4ce:	08 95       	ret
	}
	else if(littlerecieve<littleFeedBack-25){
		//index finger down
		//WDT_off();
		//WDT_ON();
		PORTC&=~(1<<3);
 4d0:	ab 98       	cbi	0x15, 3	; 21
		PORTC|=(1<<2);
 4d2:	aa 9a       	sbi	0x15, 2	; 21
		//WDT_off();
		//WDT_ON();
		PORTC&=~(1<<2);
		PORTC&=~(1<<3);
	}
}
 4d4:	08 95       	ret
		//WDT_ON();
		PORTC&=~(1<<2);
		PORTC&=~(1<<3);
	}
	
	else if(littlerecieve>littleFeedBack+25){
 4d6:	67 5e       	subi	r22, 0xE7	; 231
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	68 17       	cp	r22, r24
 4dc:	79 07       	cpc	r23, r25
 4de:	ac f3       	brlt	.-22     	; 0x4ca <littleMotor+0x1c>
 4e0:	f7 cf       	rjmp	.-18     	; 0x4d0 <littleMotor+0x22>

000004e2 <servoInit>:
	}
}

void servoInit()
{
	DDRD|=1<<PD5; // OC1A as output
 4e2:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A=0x82;  //Non inverting FAST PWM mode 14
 4e4:	82 e8       	ldi	r24, 0x82	; 130
 4e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1A;  //Prescaler 8   Timer frequency 1 us
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	8e bd       	out	0x2e, r24	; 46
	ICR1=19999; //50 Hz PWM Frequency
 4ec:	8f e1       	ldi	r24, 0x1F	; 31
 4ee:	9e e4       	ldi	r25, 0x4E	; 78
 4f0:	97 bd       	out	0x27, r25	; 39
 4f2:	86 bd       	out	0x26, r24	; 38
 4f4:	08 95       	ret

000004f6 <servo>:
}

void servo(int x){
	int i;
	i=400 + (x*10.3);
	OCR1A=i;
 4f6:	bc 01       	movw	r22, r24
 4f8:	99 0f       	add	r25, r25
 4fa:	88 0b       	sbc	r24, r24
 4fc:	99 0b       	sbc	r25, r25
 4fe:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
 502:	2d ec       	ldi	r18, 0xCD	; 205
 504:	3c ec       	ldi	r19, 0xCC	; 204
 506:	44 e2       	ldi	r20, 0x24	; 36
 508:	51 e4       	ldi	r21, 0x41	; 65
 50a:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	48 ec       	ldi	r20, 0xC8	; 200
 514:	53 e4       	ldi	r21, 0x43	; 67
 516:	0e 94 05 03 	call	0x60a	; 0x60a <__addsf3>
 51a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fixsfsi>
 51e:	7b bd       	out	0x2b, r23	; 43
 520:	6a bd       	out	0x2a, r22	; 42
 522:	08 95       	ret

00000524 <main>:
void servomove(int thumbrecieve);


int main(void)
{
    uart_init();
 524:	0e 94 5c 00 	call	0xb8	; 0xb8 <uart_init>
	servoInit();
 528:	0e 94 71 02 	call	0x4e2	; 0x4e2 <servoInit>
	servo(155);
 52c:	8b e9       	ldi	r24, 0x9B	; 155
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <servo>
	adcInit();
 534:	0e 94 4d 00 	call	0x9a	; 0x9a <adcInit>
	timerInit();
 538:	0e 94 55 00 	call	0xaa	; 0xaa <timerInit>
	adcStart(0);
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 51 00 	call	0xa2	; 0xa2 <adcStart>
	uart_string("Hello World");
 542:	8c e6       	ldi	r24, 0x6C	; 108
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_string>
	sei();
 54a:	78 94       	sei
 54c:	ff cf       	rjmp	.-2      	; 0x54c <main+0x28>

0000054e <servomove>:
	i=400 + (x*10.3);
	OCR1A=i;
}


void servomove(int thumbrecieve){
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
	WDT_off();
 554:	0e 94 49 00 	call	0x92	; 0x92 <WDT_off>
{
	/*
	Watchdog timer enables with typical timeout period 1s 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2);
 558:	8c e0       	ldi	r24, 0x0C	; 12
 55a:	81 bd       	out	0x21, r24	; 33


void servomove(int thumbrecieve){
	WDT_off();
	WDT_ON();
	servo(thumbrecieve);
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <servo>
	
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <__vector_19>:
	loop++;
	if(loop>3)	loop=0;
	adcStart(loop);
}

ISR(TIMER0_COMP_vect){
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
	int target3, position3;
	int target4, position4;
	
		target1=indexrecieve;
		position1=indexFeedBack;
		indexMotor(target1,position1);
 58a:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <indexFeedBack>
 58e:	70 91 a0 00 	lds	r23, 0x00A0	; 0x8000a0 <indexFeedBack+0x1>
 592:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <indexrecieve>
 596:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <indexrecieve+0x1>
 59a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <indexMotor>
		
	
		target2=middlerecieve;
		position2=middleFeedBack;
		middleMotor(target2,position2);
 59e:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <middleFeedBack>
 5a2:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <middleFeedBack+0x1>
 5a6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <middlerecieve>
 5aa:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <middlerecieve+0x1>
 5ae:	0e 94 07 02 	call	0x40e	; 0x40e <middleMotor>
		
	
		target3=ringrecieve;
		position3=ringFeedBack;
		ringMotor(target3,position3);
 5b2:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <ringFeedBack>
 5b6:	70 91 80 00 	lds	r23, 0x0080	; 0x800080 <ringFeedBack+0x1>
 5ba:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <ringrecieve>
 5be:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <ringrecieve+0x1>
 5c2:	0e 94 31 02 	call	0x462	; 0x462 <ringMotor>
		
	
		target4=littlerecieve;
		position4=littleFeedBack;
		littleMotor(target4,position4);
 5c6:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <littleFeedBack>
 5ca:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <littleFeedBack+0x1>
 5ce:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <littlerecieve>
 5d2:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <littlerecieve+0x1>
 5d6:	0e 94 57 02 	call	0x4ae	; 0x4ae <littleMotor>
		
		//if(j==100){
			servomove(thumbrecieve);	
 5da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <thumbrecieve>
 5de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <thumbrecieve+0x1>
 5e2:	0e 94 a7 02 	call	0x54e	; 0x54e <servomove>
		//	j=-1;
		//}
		//j++;
		
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__subsf3>:
 608:	50 58       	subi	r21, 0x80	; 128

0000060a <__addsf3>:
 60a:	bb 27       	eor	r27, r27
 60c:	aa 27       	eor	r26, r26
 60e:	0e 94 1c 03 	call	0x638	; 0x638 <__addsf3x>
 612:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_round>
 616:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_pscA>
 61a:	38 f0       	brcs	.+14     	; 0x62a <__addsf3+0x20>
 61c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__addsf3+0x20>
 622:	39 f4       	brne	.+14     	; 0x632 <__addsf3+0x28>
 624:	9f 3f       	cpi	r25, 0xFF	; 255
 626:	19 f4       	brne	.+6      	; 0x62e <__addsf3+0x24>
 628:	26 f4       	brtc	.+8      	; 0x632 <__addsf3+0x28>
 62a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_nan>
 62e:	0e f4       	brtc	.+2      	; 0x632 <__addsf3+0x28>
 630:	e0 95       	com	r30
 632:	e7 fb       	bst	r30, 7
 634:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_inf>

00000638 <__addsf3x>:
 638:	e9 2f       	mov	r30, r25
 63a:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_split3>
 63e:	58 f3       	brcs	.-42     	; 0x616 <__addsf3+0xc>
 640:	ba 17       	cp	r27, r26
 642:	62 07       	cpc	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	95 07       	cpc	r25, r21
 64a:	20 f0       	brcs	.+8      	; 0x654 <__addsf3x+0x1c>
 64c:	79 f4       	brne	.+30     	; 0x66c <__addsf3x+0x34>
 64e:	a6 f5       	brtc	.+104    	; 0x6b8 <__addsf3x+0x80>
 650:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_zero>
 654:	0e f4       	brtc	.+2      	; 0x658 <__addsf3x+0x20>
 656:	e0 95       	com	r30
 658:	0b 2e       	mov	r0, r27
 65a:	ba 2f       	mov	r27, r26
 65c:	a0 2d       	mov	r26, r0
 65e:	0b 01       	movw	r0, r22
 660:	b9 01       	movw	r22, r18
 662:	90 01       	movw	r18, r0
 664:	0c 01       	movw	r0, r24
 666:	ca 01       	movw	r24, r20
 668:	a0 01       	movw	r20, r0
 66a:	11 24       	eor	r1, r1
 66c:	ff 27       	eor	r31, r31
 66e:	59 1b       	sub	r21, r25
 670:	99 f0       	breq	.+38     	; 0x698 <__addsf3x+0x60>
 672:	59 3f       	cpi	r21, 0xF9	; 249
 674:	50 f4       	brcc	.+20     	; 0x68a <__addsf3x+0x52>
 676:	50 3e       	cpi	r21, 0xE0	; 224
 678:	68 f1       	brcs	.+90     	; 0x6d4 <__addsf3x+0x9c>
 67a:	1a 16       	cp	r1, r26
 67c:	f0 40       	sbci	r31, 0x00	; 0
 67e:	a2 2f       	mov	r26, r18
 680:	23 2f       	mov	r18, r19
 682:	34 2f       	mov	r19, r20
 684:	44 27       	eor	r20, r20
 686:	58 5f       	subi	r21, 0xF8	; 248
 688:	f3 cf       	rjmp	.-26     	; 0x670 <__addsf3x+0x38>
 68a:	46 95       	lsr	r20
 68c:	37 95       	ror	r19
 68e:	27 95       	ror	r18
 690:	a7 95       	ror	r26
 692:	f0 40       	sbci	r31, 0x00	; 0
 694:	53 95       	inc	r21
 696:	c9 f7       	brne	.-14     	; 0x68a <__addsf3x+0x52>
 698:	7e f4       	brtc	.+30     	; 0x6b8 <__addsf3x+0x80>
 69a:	1f 16       	cp	r1, r31
 69c:	ba 0b       	sbc	r27, r26
 69e:	62 0b       	sbc	r22, r18
 6a0:	73 0b       	sbc	r23, r19
 6a2:	84 0b       	sbc	r24, r20
 6a4:	ba f0       	brmi	.+46     	; 0x6d4 <__addsf3x+0x9c>
 6a6:	91 50       	subi	r25, 0x01	; 1
 6a8:	a1 f0       	breq	.+40     	; 0x6d2 <__addsf3x+0x9a>
 6aa:	ff 0f       	add	r31, r31
 6ac:	bb 1f       	adc	r27, r27
 6ae:	66 1f       	adc	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	c2 f7       	brpl	.-16     	; 0x6a6 <__addsf3x+0x6e>
 6b6:	0e c0       	rjmp	.+28     	; 0x6d4 <__addsf3x+0x9c>
 6b8:	ba 0f       	add	r27, r26
 6ba:	62 1f       	adc	r22, r18
 6bc:	73 1f       	adc	r23, r19
 6be:	84 1f       	adc	r24, r20
 6c0:	48 f4       	brcc	.+18     	; 0x6d4 <__addsf3x+0x9c>
 6c2:	87 95       	ror	r24
 6c4:	77 95       	ror	r23
 6c6:	67 95       	ror	r22
 6c8:	b7 95       	ror	r27
 6ca:	f7 95       	ror	r31
 6cc:	9e 3f       	cpi	r25, 0xFE	; 254
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__addsf3x+0x9a>
 6d0:	b0 cf       	rjmp	.-160    	; 0x632 <__addsf3+0x28>
 6d2:	93 95       	inc	r25
 6d4:	88 0f       	add	r24, r24
 6d6:	08 f0       	brcs	.+2      	; 0x6da <__addsf3x+0xa2>
 6d8:	99 27       	eor	r25, r25
 6da:	ee 0f       	add	r30, r30
 6dc:	97 95       	ror	r25
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret

000006e2 <__fixsfsi>:
 6e2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixunssfsi>
 6e6:	68 94       	set
 6e8:	b1 11       	cpse	r27, r1
 6ea:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_szero>
 6ee:	08 95       	ret

000006f0 <__fixunssfsi>:
 6f0:	0e 94 14 04 	call	0x828	; 0x828 <__fp_splitA>
 6f4:	88 f0       	brcs	.+34     	; 0x718 <__fixunssfsi+0x28>
 6f6:	9f 57       	subi	r25, 0x7F	; 127
 6f8:	98 f0       	brcs	.+38     	; 0x720 <__fixunssfsi+0x30>
 6fa:	b9 2f       	mov	r27, r25
 6fc:	99 27       	eor	r25, r25
 6fe:	b7 51       	subi	r27, 0x17	; 23
 700:	b0 f0       	brcs	.+44     	; 0x72e <__fixunssfsi+0x3e>
 702:	e1 f0       	breq	.+56     	; 0x73c <__fixunssfsi+0x4c>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	1a f0       	brmi	.+6      	; 0x714 <__fixunssfsi+0x24>
 70e:	ba 95       	dec	r27
 710:	c9 f7       	brne	.-14     	; 0x704 <__fixunssfsi+0x14>
 712:	14 c0       	rjmp	.+40     	; 0x73c <__fixunssfsi+0x4c>
 714:	b1 30       	cpi	r27, 0x01	; 1
 716:	91 f0       	breq	.+36     	; 0x73c <__fixunssfsi+0x4c>
 718:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_zero>
 71c:	b1 e0       	ldi	r27, 0x01	; 1
 71e:	08 95       	ret
 720:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_zero>
 724:	67 2f       	mov	r22, r23
 726:	78 2f       	mov	r23, r24
 728:	88 27       	eor	r24, r24
 72a:	b8 5f       	subi	r27, 0xF8	; 248
 72c:	39 f0       	breq	.+14     	; 0x73c <__fixunssfsi+0x4c>
 72e:	b9 3f       	cpi	r27, 0xF9	; 249
 730:	cc f3       	brlt	.-14     	; 0x724 <__fixunssfsi+0x34>
 732:	86 95       	lsr	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b3 95       	inc	r27
 73a:	d9 f7       	brne	.-10     	; 0x732 <__fixunssfsi+0x42>
 73c:	3e f4       	brtc	.+14     	; 0x74c <__fixunssfsi+0x5c>
 73e:	90 95       	com	r25
 740:	80 95       	com	r24
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	08 95       	ret

0000074e <__floatunsisf>:
 74e:	e8 94       	clt
 750:	09 c0       	rjmp	.+18     	; 0x764 <__floatsisf+0x12>

00000752 <__floatsisf>:
 752:	97 fb       	bst	r25, 7
 754:	3e f4       	brtc	.+14     	; 0x764 <__floatsisf+0x12>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	99 23       	and	r25, r25
 766:	a9 f0       	breq	.+42     	; 0x792 <__floatsisf+0x40>
 768:	f9 2f       	mov	r31, r25
 76a:	96 e9       	ldi	r25, 0x96	; 150
 76c:	bb 27       	eor	r27, r27
 76e:	93 95       	inc	r25
 770:	f6 95       	lsr	r31
 772:	87 95       	ror	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f1 11       	cpse	r31, r1
 77c:	f8 cf       	rjmp	.-16     	; 0x76e <__floatsisf+0x1c>
 77e:	fa f4       	brpl	.+62     	; 0x7be <__floatsisf+0x6c>
 780:	bb 0f       	add	r27, r27
 782:	11 f4       	brne	.+4      	; 0x788 <__floatsisf+0x36>
 784:	60 ff       	sbrs	r22, 0
 786:	1b c0       	rjmp	.+54     	; 0x7be <__floatsisf+0x6c>
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	16 c0       	rjmp	.+44     	; 0x7be <__floatsisf+0x6c>
 792:	88 23       	and	r24, r24
 794:	11 f0       	breq	.+4      	; 0x79a <__floatsisf+0x48>
 796:	96 e9       	ldi	r25, 0x96	; 150
 798:	11 c0       	rjmp	.+34     	; 0x7bc <__floatsisf+0x6a>
 79a:	77 23       	and	r23, r23
 79c:	21 f0       	breq	.+8      	; 0x7a6 <__floatsisf+0x54>
 79e:	9e e8       	ldi	r25, 0x8E	; 142
 7a0:	87 2f       	mov	r24, r23
 7a2:	76 2f       	mov	r23, r22
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <__floatsisf+0x5e>
 7a6:	66 23       	and	r22, r22
 7a8:	71 f0       	breq	.+28     	; 0x7c6 <__floatsisf+0x74>
 7aa:	96 e8       	ldi	r25, 0x86	; 134
 7ac:	86 2f       	mov	r24, r22
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	2a f0       	brmi	.+10     	; 0x7be <__floatsisf+0x6c>
 7b4:	9a 95       	dec	r25
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	da f7       	brpl	.-10     	; 0x7b4 <__floatsisf+0x62>
 7be:	88 0f       	add	r24, r24
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__fp_inf>:
 7c8:	97 f9       	bld	r25, 7
 7ca:	9f 67       	ori	r25, 0x7F	; 127
 7cc:	80 e8       	ldi	r24, 0x80	; 128
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	08 95       	ret

000007d4 <__fp_nan>:
 7d4:	9f ef       	ldi	r25, 0xFF	; 255
 7d6:	80 ec       	ldi	r24, 0xC0	; 192
 7d8:	08 95       	ret

000007da <__fp_pscA>:
 7da:	00 24       	eor	r0, r0
 7dc:	0a 94       	dec	r0
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	09 06       	cpc	r0, r25
 7e6:	08 95       	ret

000007e8 <__fp_pscB>:
 7e8:	00 24       	eor	r0, r0
 7ea:	0a 94       	dec	r0
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	14 06       	cpc	r1, r20
 7f2:	05 06       	cpc	r0, r21
 7f4:	08 95       	ret

000007f6 <__fp_round>:
 7f6:	09 2e       	mov	r0, r25
 7f8:	03 94       	inc	r0
 7fa:	00 0c       	add	r0, r0
 7fc:	11 f4       	brne	.+4      	; 0x802 <__fp_round+0xc>
 7fe:	88 23       	and	r24, r24
 800:	52 f0       	brmi	.+20     	; 0x816 <__fp_round+0x20>
 802:	bb 0f       	add	r27, r27
 804:	40 f4       	brcc	.+16     	; 0x816 <__fp_round+0x20>
 806:	bf 2b       	or	r27, r31
 808:	11 f4       	brne	.+4      	; 0x80e <__fp_round+0x18>
 80a:	60 ff       	sbrs	r22, 0
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__fp_round+0x20>
 80e:	6f 5f       	subi	r22, 0xFF	; 255
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	08 95       	ret

00000818 <__fp_split3>:
 818:	57 fd       	sbrc	r21, 7
 81a:	90 58       	subi	r25, 0x80	; 128
 81c:	44 0f       	add	r20, r20
 81e:	55 1f       	adc	r21, r21
 820:	59 f0       	breq	.+22     	; 0x838 <__fp_splitA+0x10>
 822:	5f 3f       	cpi	r21, 0xFF	; 255
 824:	71 f0       	breq	.+28     	; 0x842 <__fp_splitA+0x1a>
 826:	47 95       	ror	r20

00000828 <__fp_splitA>:
 828:	88 0f       	add	r24, r24
 82a:	97 fb       	bst	r25, 7
 82c:	99 1f       	adc	r25, r25
 82e:	61 f0       	breq	.+24     	; 0x848 <__fp_splitA+0x20>
 830:	9f 3f       	cpi	r25, 0xFF	; 255
 832:	79 f0       	breq	.+30     	; 0x852 <__fp_splitA+0x2a>
 834:	87 95       	ror	r24
 836:	08 95       	ret
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	14 06       	cpc	r1, r20
 83e:	55 1f       	adc	r21, r21
 840:	f2 cf       	rjmp	.-28     	; 0x826 <__fp_split3+0xe>
 842:	46 95       	lsr	r20
 844:	f1 df       	rcall	.-30     	; 0x828 <__fp_splitA>
 846:	08 c0       	rjmp	.+16     	; 0x858 <__fp_splitA+0x30>
 848:	16 16       	cp	r1, r22
 84a:	17 06       	cpc	r1, r23
 84c:	18 06       	cpc	r1, r24
 84e:	99 1f       	adc	r25, r25
 850:	f1 cf       	rjmp	.-30     	; 0x834 <__fp_splitA+0xc>
 852:	86 95       	lsr	r24
 854:	71 05       	cpc	r23, r1
 856:	61 05       	cpc	r22, r1
 858:	08 94       	sec
 85a:	08 95       	ret

0000085c <__fp_zero>:
 85c:	e8 94       	clt

0000085e <__fp_szero>:
 85e:	bb 27       	eor	r27, r27
 860:	66 27       	eor	r22, r22
 862:	77 27       	eor	r23, r23
 864:	cb 01       	movw	r24, r22
 866:	97 f9       	bld	r25, 7
 868:	08 95       	ret

0000086a <__mulsf3>:
 86a:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3x>
 86e:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_round>
 872:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_pscA>
 876:	38 f0       	brcs	.+14     	; 0x886 <__mulsf3+0x1c>
 878:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscB>
 87c:	20 f0       	brcs	.+8      	; 0x886 <__mulsf3+0x1c>
 87e:	95 23       	and	r25, r21
 880:	11 f0       	breq	.+4      	; 0x886 <__mulsf3+0x1c>
 882:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_inf>
 886:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_nan>
 88a:	11 24       	eor	r1, r1
 88c:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_szero>

00000890 <__mulsf3x>:
 890:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_split3>
 894:	70 f3       	brcs	.-36     	; 0x872 <__mulsf3+0x8>

00000896 <__mulsf3_pse>:
 896:	95 9f       	mul	r25, r21
 898:	c1 f3       	breq	.-16     	; 0x88a <__mulsf3+0x20>
 89a:	95 0f       	add	r25, r21
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	55 1f       	adc	r21, r21
 8a0:	62 9f       	mul	r22, r18
 8a2:	f0 01       	movw	r30, r0
 8a4:	72 9f       	mul	r23, r18
 8a6:	bb 27       	eor	r27, r27
 8a8:	f0 0d       	add	r31, r0
 8aa:	b1 1d       	adc	r27, r1
 8ac:	63 9f       	mul	r22, r19
 8ae:	aa 27       	eor	r26, r26
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	aa 1f       	adc	r26, r26
 8b6:	64 9f       	mul	r22, r20
 8b8:	66 27       	eor	r22, r22
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	66 1f       	adc	r22, r22
 8c0:	82 9f       	mul	r24, r18
 8c2:	22 27       	eor	r18, r18
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 9f       	mul	r23, r19
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	83 9f       	mul	r24, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	22 1f       	adc	r18, r18
 8da:	74 9f       	mul	r23, r20
 8dc:	33 27       	eor	r19, r19
 8de:	a0 0d       	add	r26, r0
 8e0:	61 1d       	adc	r22, r1
 8e2:	23 1f       	adc	r18, r19
 8e4:	84 9f       	mul	r24, r20
 8e6:	60 0d       	add	r22, r0
 8e8:	21 1d       	adc	r18, r1
 8ea:	82 2f       	mov	r24, r18
 8ec:	76 2f       	mov	r23, r22
 8ee:	6a 2f       	mov	r22, r26
 8f0:	11 24       	eor	r1, r1
 8f2:	9f 57       	subi	r25, 0x7F	; 127
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	9a f0       	brmi	.+38     	; 0x91e <__mulsf3_pse+0x88>
 8f8:	f1 f0       	breq	.+60     	; 0x936 <__mulsf3_pse+0xa0>
 8fa:	88 23       	and	r24, r24
 8fc:	4a f0       	brmi	.+18     	; 0x910 <__mulsf3_pse+0x7a>
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	a9 f7       	brne	.-22     	; 0x8fa <__mulsf3_pse+0x64>
 910:	9e 3f       	cpi	r25, 0xFE	; 254
 912:	51 05       	cpc	r21, r1
 914:	80 f0       	brcs	.+32     	; 0x936 <__mulsf3_pse+0xa0>
 916:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_inf>
 91a:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_szero>
 91e:	5f 3f       	cpi	r21, 0xFF	; 255
 920:	e4 f3       	brlt	.-8      	; 0x91a <__mulsf3_pse+0x84>
 922:	98 3e       	cpi	r25, 0xE8	; 232
 924:	d4 f3       	brlt	.-12     	; 0x91a <__mulsf3_pse+0x84>
 926:	86 95       	lsr	r24
 928:	77 95       	ror	r23
 92a:	67 95       	ror	r22
 92c:	b7 95       	ror	r27
 92e:	f7 95       	ror	r31
 930:	e7 95       	ror	r30
 932:	9f 5f       	subi	r25, 0xFF	; 255
 934:	c1 f7       	brne	.-16     	; 0x926 <__mulsf3_pse+0x90>
 936:	fe 2b       	or	r31, r30
 938:	88 0f       	add	r24, r24
 93a:	91 1d       	adc	r25, r1
 93c:	96 95       	lsr	r25
 93e:	87 95       	ror	r24
 940:	97 f9       	bld	r25, 7
 942:	08 95       	ret

00000944 <atoi>:
 944:	fc 01       	movw	r30, r24
 946:	88 27       	eor	r24, r24
 948:	99 27       	eor	r25, r25
 94a:	e8 94       	clt
 94c:	21 91       	ld	r18, Z+
 94e:	20 32       	cpi	r18, 0x20	; 32
 950:	e9 f3       	breq	.-6      	; 0x94c <atoi+0x8>
 952:	29 30       	cpi	r18, 0x09	; 9
 954:	10 f0       	brcs	.+4      	; 0x95a <atoi+0x16>
 956:	2e 30       	cpi	r18, 0x0E	; 14
 958:	c8 f3       	brcs	.-14     	; 0x94c <atoi+0x8>
 95a:	2b 32       	cpi	r18, 0x2B	; 43
 95c:	41 f0       	breq	.+16     	; 0x96e <atoi+0x2a>
 95e:	2d 32       	cpi	r18, 0x2D	; 45
 960:	39 f4       	brne	.+14     	; 0x970 <atoi+0x2c>
 962:	68 94       	set
 964:	04 c0       	rjmp	.+8      	; 0x96e <atoi+0x2a>
 966:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__mulhi_const_10>
 96a:	82 0f       	add	r24, r18
 96c:	91 1d       	adc	r25, r1
 96e:	21 91       	ld	r18, Z+
 970:	20 53       	subi	r18, 0x30	; 48
 972:	2a 30       	cpi	r18, 0x0A	; 10
 974:	c0 f3       	brcs	.-16     	; 0x966 <atoi+0x22>
 976:	1e f4       	brtc	.+6      	; 0x97e <atoi+0x3a>
 978:	90 95       	com	r25
 97a:	81 95       	neg	r24
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	08 95       	ret

00000980 <memmove>:
 980:	68 17       	cp	r22, r24
 982:	79 07       	cpc	r23, r25
 984:	68 f4       	brcc	.+26     	; 0x9a0 <memmove+0x20>
 986:	fb 01       	movw	r30, r22
 988:	dc 01       	movw	r26, r24
 98a:	e4 0f       	add	r30, r20
 98c:	f5 1f       	adc	r31, r21
 98e:	a4 0f       	add	r26, r20
 990:	b5 1f       	adc	r27, r21
 992:	02 c0       	rjmp	.+4      	; 0x998 <memmove+0x18>
 994:	02 90       	ld	r0, -Z
 996:	0e 92       	st	-X, r0
 998:	41 50       	subi	r20, 0x01	; 1
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	d8 f7       	brcc	.-10     	; 0x994 <memmove+0x14>
 99e:	08 95       	ret
 9a0:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <memcpy>

000009a4 <strcpy>:
 9a4:	fb 01       	movw	r30, r22
 9a6:	dc 01       	movw	r26, r24
 9a8:	01 90       	ld	r0, Z+
 9aa:	0d 92       	st	X+, r0
 9ac:	00 20       	and	r0, r0
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <strcpy+0x4>
 9b0:	08 95       	ret

000009b2 <__mulhi_const_10>:
 9b2:	7a e0       	ldi	r23, 0x0A	; 10
 9b4:	97 9f       	mul	r25, r23
 9b6:	90 2d       	mov	r25, r0
 9b8:	87 9f       	mul	r24, r23
 9ba:	80 2d       	mov	r24, r0
 9bc:	91 0d       	add	r25, r1
 9be:	11 24       	eor	r1, r1
 9c0:	08 95       	ret

000009c2 <memcpy>:
 9c2:	fb 01       	movw	r30, r22
 9c4:	dc 01       	movw	r26, r24
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <memcpy+0xa>
 9c8:	01 90       	ld	r0, Z+
 9ca:	0d 92       	st	X+, r0
 9cc:	41 50       	subi	r20, 0x01	; 1
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	d8 f7       	brcc	.-10     	; 0x9c8 <memcpy+0x6>
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
